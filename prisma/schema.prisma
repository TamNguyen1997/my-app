// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["fullTextSearch", "fullTextIndex", "relationJoins"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model product {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String
  slug     String
  imageAlt String? @map("image_alt")

  imageId String? @map("image_id") @db.Uuid
  image   image?  @relation(fields: [imageId], references: [id])

  active    Boolean @default(true)
  sku       String?
  highlight Boolean @default(false)

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  description String?

  saleDetails sale_detail[]

  category   category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @map("category_id")
  subCateId  String?   @map("sub_cate_id")
  subCate    category? @relation("subCate", fields: [subCateId], references: [id])

  quantity Int @default(0)

  brand            brand?             @relation(fields: [brandId], references: [id])
  brandId          String?
  product_on_order product_on_order[]
  product_on_image product_on_image[]

  productType product_type @default(PRODUCT) @map("product_type")
  width       Int          @default(0)
  length      Int          @default(0)
  height      Int          @default(0)
  weight      Int          @default(0)

  componentParts  product[]           @relation("componentParts")
  product         product?            @relation("componentParts", fields: [productId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  productId       String?             @db.Uuid
  filterOnProduct filter_on_product[]

  metaTitle        String?
  metaDescription  String?
  technical_detail technical_detail[]

  @@index([imageId])
  @@index([categoryId])
  @@index([brandId])
  @@index([subCateId])
  @@index([productId])
}

enum product_type {
  PRODUCT
  COMPONENT_PART
}

model product_on_image {
  productId String  @db.Uuid
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)

  imageId String @db.Uuid
  image   image  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@id([imageId, productId])
  @@index([productId])
  @@index([imageId])
}

model technical_detail {
  id        String  @id @default(dbgenerated("gen_random_uuid()"))
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id") @db.Uuid

  filter        filter?       @relation(fields: [filterId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  filterId      String?       @map("filter_id")
  filterValue   filter_value? @relation(fields: [filterValueId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  filterValueId String?       @map("filter_value_id")

  @@index([productId])
  @@index([filterId])
  @@index([filterValueId])
}

enum sale_detail_type {
  COLOR
  TEXT
}

model sale_detail {
  id        String           @id @default(dbgenerated("gen_random_uuid()"))
  product   product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String           @map("product_id") @db.Uuid
  value     String?
  price     Int
  type      sale_detail_type @default(TEXT)

  childSaleDetails sale_detail[]      @relation("secondary_sale_detail")
  saleDetail       sale_detail?       @relation("secondary_sale_detail", fields: [saleDetailId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  saleDetailId     String?            @map("sale_detail_id")
  productOnOrder   product_on_order[]

  filter   filter? @relation(fields: [filterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  filterId String? @map("filter_id")

  filterValue   filter_value? @relation(fields: [filterValueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  filterValueId String?       @map("filter_value_id")

  sku              String?
  promotionalPrice Int?
  showPrice        Boolean @default(true)
  inStock          Int     @default(0)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([productId])
  @@index([saleDetailId])
  @@index([filterId])
  @@index([filterValueId])
}

model filter {
  id     String  @id @default(dbgenerated("gen_random_uuid()"))
  name   String  @default("")
  active Boolean @default(false)

  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @default(now()) @updatedAt @map("updated_at")
  filterValue      filter_value[]
  technical_detail technical_detail[]
  sale_detail      sale_detail[]
}

model filter_value {
  id       String  @id @default(dbgenerated("gen_random_uuid()"))
  value    String  @default("")
  slug     String?
  filter   filter? @relation(fields: [filterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  filterId String  @map("filter_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  active Boolean @default(false)

  technicalDetails technical_detail[]
  saleDetails      sale_detail[]
  categories       category[]         @relation("filterValueOnCategory")
  subCategories    category[]         @relation("filterValueOnSubCategory")

  brands brand[]

  @@index([filterId])
}

enum target_type {
  CATEGORY
  BRAND
  SUB_CATEGORY
}

enum filter_type {
  BRAND
  TYPE
  DIMENSION
  EFFIENCY
  WATTAGE
  COLOR
  BATTERY
}

model filter_on_product {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product   product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?  @db.Uuid
  filterId  String?  @db.Uuid

  @@unique([filterId, productId])
  @@index([filterId])
  @@index([productId])
}

model order {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  address         String
  provinceId      String           @default("") @map("province_id")
  wardId          String           @default("") @map("ward_id")
  districtId      String           @default("") @map("district_id")
  phone           String
  email           String
  name            String
  total           Int              @default(0)
  shippingId      String?          @map("shipping_id")
  shippingStatus  SHIPPING_STATUS  @default(WAITING)
  shippingMethod  SHIPPING_METHOD?
  shippingFee     Int              @default(0) @map("shipping_fee")
  customerPayment Int              @default(0) @map("customer_payment")
  orderId         String           @default(dbgenerated("gen_random_uuid()")) @map("order_id")

  companyName    String? @map("company_name")
  companyEmail   String? @map("company_email")
  companyTaxCode String? @map("company_tax_code")
  companyAddress String? @map("company_address")

  status               ORDER_STATUS   @default(PENDING)
  paymentMethod        PAYMENT_METHOD @default(COD) @map("payment_method")
  shippingOrderCreated Boolean        @default(false) @map("shipping_order_created")

  vnpayTransactionNo     String?          @map("vnpay_transaction_no")
  bankTransactionNo      String?          @map("bank_transaction_no")
  bankCode               String?          @map("bank_code")
  vnpayResponseCode      Int?             @map("vnpay_response_code")
  vnpayTransactionStatus Int?             @map("vnpay_transaction_status")
  vnpayTxtRef            String?          @map("vnpay_txt_ref")
  vnpayHashType          VNPAY_HASH_TYPE? @default(SHA256) @map("vnpay_hash_type")
  vnpaySecureHash        String?          @map("vnpay_secure_hash")

  product_on_order product_on_order[]
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @default(now()) @updatedAt @map("updated_at")

  @@index([orderId])
}

enum VNPAY_HASH_TYPE {
  SHA256
  HmacSHA512
}

enum SHIPPING_METHOD {
  VIETTEL_POST
}

enum ORDER_STATUS {
  PENDING
  PAID
  DELIVERED
}

enum PAYMENT_METHOD {
  OCD
  COD
  VIETQR
}

enum SHIPPING_STATUS {
  WAITING
  SHIPPING
  SHIPPED
}

model product_on_order {
  product      product      @relation(fields: [productId], references: [id])
  productId    String       @map("product_id") @db.Uuid
  order        order        @relation(fields: [orderId], references: [id])
  orderId      String       @map("order_id") @db.Uuid
  quantity     Int          @default(0)
  saleDetailId String?      @map("sale_detail_id")
  saleDetail   sale_detail? @relation(fields: [saleDetailId], references: [id])
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @default(now()) @updatedAt @map("updated_at")

  @@id([productId, orderId])
  @@index([orderId])
  @@index([saleDetailId])
}

model image {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  path             String
  name             String
  alt              String?
  description      String?
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @default(now()) @updatedAt @map("updated_at")
  type             image_type         @default(PRODUCT)
  active           Boolean            @default(true)
  slug             String
  banner           banner[]
  product          product[]
  category         category[]
  product_on_image product_on_image[]

  @@unique([slug, type])
}

enum BannerType {
  DEFAULT
  SCHEDULED
}

model banner {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active     Boolean   @default(true)
  activeFrom DateTime? @map("active_from") @db.Date
  activeTo   DateTime? @map("active_to") @db.Date
  order      Int

  type      BannerType @default(DEFAULT)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")

  imageId String? @map("image_id") @db.Uuid
  image   image?  @relation(fields: [imageId], references: [id])

  @@index([imageId])
}

model blog {
  id              String    @id @default(dbgenerated("gen_random_uuid()"))
  blogId          String?   @default(dbgenerated("gen_random_uuid()")) @map("blog_id")
  title           String
  content         String
  slug            String    @unique @default(dbgenerated("gen_random_uuid()"))
  thumbnail       String    @default("")
  altThumb        String    @default("") @map("alt_thumb")
  metaTitle       String    @default("") @map("meta_title")
  metaDescription String    @default("") @map("meta_description")
  keyword         String    @default("")
  active          Boolean   @default(true)
  activeFrom      DateTime  @default(now())
  description     String?
  author          String?
  summary         String?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")
  type            blog_type @default(BLOG)
  draft           String?

  blogCategory    blog_category     @default(INFORMATION) @map("blog_category")
  blogSubCategory blog_sub_category @default(MANUAL) @map("blog_sub_category")
}

model contact_info {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String @default("")
  email String @default("")
  phone String @default("")
  note  String @default("")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

enum blog_sub_category {
  TERMINOLOGY
  ADVISORY
  MANUAL
}

enum blog_category {
  INFORMATION
  NEWS
}

model user {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username  String   @unique
  password  String
  email     String   @unique
  name      String
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([username, email])
}

enum image_type {
  PRODUCT
  BLOG
  BANNER
}

model category {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  name         String
  slug         String   @default(dbgenerated("gen_random_uuid()"))
  highlight    Boolean  @default(false)
  showOnHeader Boolean  @default(false) @map("show_on_header")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  headerOrder Int     @default(0) @map("header_order")
  imageId     String? @db.Uuid
  image       image?  @relation(fields: [imageId], references: [id])

  type     cate_type  @default(CATE)
  cateId   String?
  cate     category?  @relation("sub_cate", fields: [cateId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  subcates category[] @relation("sub_cate")
  product  product[]
  sProduct product[]  @relation("subCate")

  filterValueOnCategory   filter_value? @relation("filterValueOnCategory", fields: [filterValueOnCategoryId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  filterValueOnCategoryId String?

  filterValueOnSubCategory   filter_value? @relation("filterValueOnSubCategory", fields: [filterValueOnSubCategoryId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  filterValueOnSubCategoryId String?

  @@unique([slug])
  @@index([imageId])
  @@index([cateId])
  @@index([filterValueOnCategoryId])
  @@index([filterValueOnSubCategoryId])
}

enum cate_type {
  SUB_CATE
  CATE
}

model brand {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  name      String   @unique
  slug      String   @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  product        product[]
  filter_value   filter_value? @relation(fields: [filter_valueId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  filter_valueId String?

  @@unique([slug])
  @@index([filter_valueId])
}

enum blog_type {
  BLOG
  CONTACT
  LEGAL
}

enum category_type {
  BRAND
  CATEGORY
}

model redirect {
  id   String @id @default(dbgenerated("gen_random_uuid()"))
  from String
  to   String

  active       Boolean @default(true)
  redirectCode Int     @default(301) @map("redirect_code")

  redirectType redirect_type @default(EXACT) @map("redirect_type")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

enum redirect_type {
  EXACT
  REGEX
}

enum history_status {
  PROCESSING
  PROCESSED
  ERROR
}

model import_history {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fileName  String
  status    history_status
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @default(now()) @updatedAt @map("updated_at")
}
