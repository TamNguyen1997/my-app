// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String
  imageId     String?  @map("image_id")
  image       image?   @relation(fields: [imageId], references: [id])
  active      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  description String?

  saleDetails            sale_detail[]
  technicalDetails       technical_detail[]
  order_history          order_history[]
  categories_to_products categories_to_products[]

  @@index([imageId])
}

model technical_detail {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rows      String
  columns   String
  product   product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  @@index([productId])
}

model sale_detail {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product            product       @relation(fields: [productId], references: [id])
  productId          String        @map("product_id")
  value              String
  price              Int?
  parentSaleDetailId String?       @db.Uuid
  saleDetails        sale_detail[] @relation("SaleDetail")
  sale_detailId      String?       @db.Uuid
  parentSaleDetail   sale_detail?  @relation("SaleDetail", fields: [parentSaleDetailId], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@index([productId])
  @@index([parentSaleDetailId])
}

model order_history {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String  @map("product_id")
  product   product @relation(fields: [productId], references: [id])

  @@index([productId])
}

model image {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  path        String
  name        String
  alt         String?
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @updatedAt @map("updated_at")
  type        image_type @default(PRODUCT)
  active      Boolean    @default(true)
  slug        String
  banner      banner[]
  product     product[]

  @@unique([slug, type])
}

enum BannerType {
  DEFAULT
  SCHEDULED
}

model banner {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active     Boolean   @default(true)
  activeFrom DateTime? @map("active_from") @db.Date
  activeTo   DateTime? @map("active_to") @db.Date
  order      Int

  type      BannerType @default(DEFAULT)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")

  imageId String? @map("image_id")
  image   image?  @relation(fields: [imageId], references: [id])

  @@index([imageId])
}

model blog {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  content   String
  thumbnail String    @default("")
  active    Boolean   @default(false)
  author    String?
  summary   String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  type      blog_type @default(BLOG)
}

model user {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username  String   @unique
  password  String
  email     String   @unique
  name      String
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([username, email])
}

enum image_type {
  PRODUCT
  BLOG
  BANNER
}

model category {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String                   @unique
  slug                   String                   @default(dbgenerated("gen_random_uuid()"))
  type                   category_type            @default(CATEGORY)
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @default(now()) @updatedAt @map("updated_at")
  categories_to_products categories_to_products[]

  @@unique([slug])
}

model categories_to_products {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  productId String  @map("product_id") @db.Uuid
  product   product @relation(fields: [productId], references: [id])

  categoryId String   @map("category_id") @db.Uuid
  category   category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([productId])
  @@index([categoryId])
}

model blog_category {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  blogId     String   @map("blog_id")
  categoryId String   @map("category_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
}

enum blog_type {
  BLOG
  CONTACT
  LEGAL
}

enum category_type {
  BRAND
  CATEGORY
}
