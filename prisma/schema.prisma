// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model product {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String
  slug     String
  imageAlt String? @map("image_alt")

  imageId String? @map("image_id") @db.Uuid
  image   image?  @relation(fields: [imageId], references: [id])

  active    Boolean @default(true)
  sku       String?
  highlight Boolean @default(false)

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  description String?

  saleDetails       sale_detail[]
  technicalDetailId String?           @map("technical_detail_id") @db.Uuid
  technical_detail  technical_detail?

  subCategory   sub_category? @relation(fields: [subCategoryId], references: [id])
  subCategoryId String?       @map("sub_category_id") @db.Uuid

  category   category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @map("category_id") @db.Uuid
  subCateId  String?   @map("sub_cate_id") @db.Uuid
  subCate    category? @relation("subCate", fields: [subCateId], references: [id])

  quantity Int @default(0)

  brand            brand?             @relation(fields: [brandId], references: [id])
  brandId          String?            @db.Uuid
  product_on_order product_on_order[]
  product_on_image product_on_image[]

  productType product_type @default(PRODUCT) @map("product_type")

  componentParts product[] @relation("componentParts")
  product        product?  @relation("componentParts", fields: [productId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  productId      String?   @db.Uuid

  @@index([imageId])
  @@index([subCategoryId])
  @@index([categoryId])
  @@index([brandId])
  @@index([subCateId])
  @@index([productId])
}

enum product_type {
  PRODUCT
  COMPONENT_PART
}

model product_on_image {
  productId String  @db.Uuid
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)

  imageId String @db.Uuid
  image   image  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@id([imageId, productId])
  @@index([productId])
  @@index([imageId])
}

model technical_detail {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  row       String
  column    String
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique @db.Uuid

  @@index([productId])
}

enum sale_detail_type {
  COLOR
  TEXT
}

model sale_detail {
  id                   String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product              product                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId            String                  @map("product_id")
  value                String
  price                Int?
  type                 sale_detail_type        @default(TEXT)
  secondarySaleDetails secondary_sale_detail[]

  childSaleDetails sale_detail[] @relation("secondary_sale_detail")
  saleDetail       sale_detail?  @relation("secondary_sale_detail", fields: [saleDetailId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  saleDetailId     String?       @map("sale_detail_id") @db.Uuid

  @@index([productId])
  @@index([saleDetailId])
}

model secondary_sale_detail {
  id    String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  value String
  price Int?
  type  sale_detail_type @default(TEXT)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  saleDetailId String      @db.Uuid
  salleDetail  sale_detail @relation(fields: [saleDetailId], references: [id], onDelete: Cascade)

  @@index([saleDetailId])
}

model order {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  address String
  phone   String
  email   String
  name    String
  total   Int    @default(0)

  status           ORDER_STATUS       @default(PENDING)
  paymentMethod    PAYMENT_METHOD     @default(OCD) @map("payment_method")
  product_on_order product_on_order[]
}

enum ORDER_STATUS {
  PENDING
  DELIVERED
}

enum PAYMENT_METHOD {
  OCD
  VIETQR
}

model product_on_order {
  product   product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")
  order     order   @relation(fields: [orderId], references: [id])
  orderId   String  @map("order_id")
  quantity  Int     @default(0)

  @@id([productId, orderId])
  @@index([orderId])
}

model image {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  path             String
  name             String
  alt              String?
  description      String?
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @default(now()) @updatedAt @map("updated_at")
  type             image_type         @default(PRODUCT)
  active           Boolean            @default(true)
  slug             String
  banner           banner[]
  product          product[]
  category         category[]
  product_on_image product_on_image[]

  @@unique([slug, type])
}

enum BannerType {
  DEFAULT
  SCHEDULED
}

model banner {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active     Boolean   @default(true)
  activeFrom DateTime? @map("active_from") @db.Date
  activeTo   DateTime? @map("active_to") @db.Date
  order      Int

  type      BannerType @default(DEFAULT)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")

  imageId String? @map("image_id")
  image   image?  @relation(fields: [imageId], references: [id])

  @@index([imageId])
}

model blog {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String
  content         String
  slug            String    @unique @default(dbgenerated("gen_random_uuid()"))
  thumbnail       String    @default("")
  altThumb        String    @default("") @map("alt_thumb")
  metaTitle       String    @default("") @map("meta_title")
  metaDescription String    @default("") @map("meta_description")
  keyword         String    @default("")
  active          Boolean   @default(true)
  activeFrom      DateTime  @default(now())
  description     String?
  author          String?
  summary         String?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")
  type            blog_type @default(BLOG)

  blogCategory    blog_category     @default(INFORMATION) @map("blog_category")
  blogSubCategory blog_sub_category @default(MANUAL) @map("blog_sub_category")
}

model contact_info {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String @default("")
  email String @default("")
  phone String @default("")
  note  String @default("")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

enum blog_sub_category {
  TERMINOLOGY
  ADVISORY
  MANUAL
}

enum blog_category {
  INFORMATION
  NEWS
}

model user {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username  String   @unique
  password  String
  email     String   @unique
  name      String
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([username, email])
}

enum image_type {
  PRODUCT
  BLOG
  BANNER
}

model category {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String   @unique
  slug         String   @default(dbgenerated("gen_random_uuid()"))
  highlight    Boolean  @default(false)
  showOnHeader Boolean  @default(false) @map("show_on_header")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  imageId String? @db.Uuid
  image   image?  @relation(fields: [imageId], references: [id])

  type        cate_type      @default(CATE)
  cateId      String?        @db.Uuid
  cate        category?      @relation("sub_cate", fields: [cateId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  subcates    category[]     @relation("sub_cate")
  product     product[]
  subCategory sub_category[]
  sProduct    product[]      @relation("subCate")

  @@unique([slug])
  @@index([imageId])
  @@index([cateId])
}

enum cate_type {
  SUB_CATE
  CATE
}

model sub_category {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @unique
  slug      String   @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  imageUrl  String?
  bannerUrl String?

  categoryId String    @db.Uuid
  category   category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    product[]

  @@unique([slug])
  @@index([categoryId])
}

model brand {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @unique
  slug      String   @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  product product[]

  @@unique([slug])
}

enum blog_type {
  BLOG
  CONTACT
  LEGAL
}

enum category_type {
  BRAND
  CATEGORY
}
