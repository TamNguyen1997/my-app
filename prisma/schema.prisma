// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model subCategory {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  categoryId String    @map("category_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  product    product[]
}

model product {
  id            String      @id
  subCategoryId String      @map("sub_category_id")
  subCategory   subCategory @relation(fields: [subCategoryId], references: [id])
  categoryId    String?
  name          String?
  imageUrl      String?     @map("image_url")
  imageAlt      String?     @map("image_alt")
  active        Boolean     @default(true)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  saleDetails      sale_detail[]
  technicalDetails technical_detail[]
  order_history    order_history[]

  @@index([subCategoryId])
}

model technical_detail {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key       String
  value     String
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String  @map("product_id")

  @@index([productId])
}

model sale_detail {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product            product       @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId          String        @map("product_id")
  value              String
  price              Int?
  parentSaleDetailId String?       @db.Uuid
  saleDetails        sale_detail[] @relation("SaleDetail")
  sale_detailId      String?       @db.Uuid
  parentSaleDetail   sale_detail?  @relation("SaleDetail", fields: [parentSaleDetailId], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@index([productId])
  @@index([parentSaleDetailId])
}

model order_history {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String  @map("product_id")
  product   product @relation(fields: [productId], references: [id])

  @@index([productId])
}

model blog {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  content   String
  thumbnail String  @default("")
  active    Boolean @default(false)
}
