// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model product {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String
  slug     String
  imageAlt String? @map("image_alt")

  imageId String? @map("image_id") @db.Uuid
  image   image?  @relation(fields: [imageId], references: [id])

  active    Boolean @default(true)
  sku       String?
  highlight Boolean @default(false)

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  description String?

  saleDetails       sale_detail[]
  order_history     order_history[]
  technicalDetailId String?           @map("technical_detail_id") @db.Uuid
  technical_detail  technical_detail?

  subCategory   sub_category? @relation(fields: [subCategoryId], references: [id])
  subCategoryId String?       @map("sub_category_id") @db.Uuid

  category   category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @map("category_id") @db.Uuid

  quantity Int @default(0)

  brand   brand?  @relation(fields: [brandId], references: [id])
  brandId String? @db.Uuid

  @@index([imageId])
  @@index([subCategoryId])
  @@index([categoryId])
  @@index([brandId])
}

model technical_detail {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  row       String
  column    String
  product   product @relation(fields: [productId], references: [id])
  productId String  @unique @db.Uuid

  @@index([productId])
}

enum sale_detail_type {
  COLOR
  TEXT
}

model sale_detail {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product   product          @relation(fields: [productId], references: [id])
  productId String           @map("product_id")
  value     String
  price     Int?
  type      sale_detail_type @default(TEXT)

  @@index([productId])
}

model order_history {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String  @map("product_id")
  product   product @relation(fields: [productId], references: [id])

  @@index([productId])
}

model image {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  path        String
  name        String
  alt         String?
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @updatedAt @map("updated_at")
  type        image_type @default(PRODUCT)
  active      Boolean    @default(true)
  slug        String
  banner      banner[]
  product     product[]

  @@unique([slug, type])
}

enum BannerType {
  DEFAULT
  SCHEDULED
}

model banner {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active     Boolean   @default(true)
  activeFrom DateTime? @map("active_from") @db.Date
  activeTo   DateTime? @map("active_to") @db.Date
  order      Int

  type      BannerType @default(DEFAULT)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")

  imageId String? @map("image_id")
  image   image?  @relation(fields: [imageId], references: [id])

  @@index([imageId])
}

model blog {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String
  content         String
  slug            String    @unique @default(dbgenerated("gen_random_uuid()"))
  thumbnail       String    @default("")
  altThumb        String    @default("") @map("alt_thumb")
  metaTitle       String    @default("") @map("meta_title")
  metaDescription String    @default("") @map("meta_description")
  keyword         String    @default("")
  active          Boolean   @default(true)
  activeFrom      DateTime  @default(now())
  description     String?
  author          String?
  summary         String?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")
  type            blog_type @default(BLOG)

  blogCategory    blog_category     @default(INFORMATION) @map("blog_category")
  blogSubCategory blog_sub_category @default(MANUAL) @map("blog_sub_category")
}

enum blog_sub_category {
  TERMINOLOGY
  ADVISORY
  MANUAL
}

enum blog_category {
  INFORMATION
  NEWS
}

model user {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username  String   @unique
  password  String
  email     String   @unique
  name      String
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([username, email])
}

enum image_type {
  PRODUCT
  BLOG
  BANNER
}

model category {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String         @unique
  slug         String         @default(dbgenerated("gen_random_uuid()"))
  highlight    Boolean        @default(false)
  showOnHeader Boolean        @default(false) @map("show_on_header")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at")
  sub_category sub_category[]
  product      product[]

  @@unique([slug])
}

model sub_category {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @unique
  slug      String   @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  imageUrl  String?
  bannerUrl String?

  categoryId String    @db.Uuid
  category   category  @relation(fields: [categoryId], references: [id])
  product    product[]

  @@unique([slug])
  @@index([categoryId])
}

model brand {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @unique
  slug      String   @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  product product[]

  @@unique([slug])
}

enum blog_type {
  BLOG
  CONTACT
  LEGAL
}

enum category_type {
  BRAND
  CATEGORY
}
